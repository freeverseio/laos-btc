# example batch file

# inscription modes:
# - `same-sat`: inscribe on the same sat
# - `satpoints`: inscribe on the first sat of specified satpoint's output
# - `separate-outputs`: inscribe on separate postage-sized outputs
# - `shared-output`: inscribe on a single output separated by postage
mode: separate-outputs

# parent inscriptions:

# postage for each inscription:
postage: 330

# allow reinscribing

# sat to inscribe on, can only be used with `same-sat`:
# sat: 5000000000

# rune to etch (optional)
etching:
  # rune nameDFNCIDAFIBRL
  rune: YFJTSNQDVFEAA
  # allow subdividing super-unit into `10^divisibility` sub-units
  divisibility: 0
  # premine
  premine: 1000.00
  # total supply, must be equal to `premine + terms.cap * terms.amount`
  supply: 10000.00
  # currency symbol
  symbol: $
  # mint terms (optional)
  terms:
    # amount per mint
    amount: 100.00
    # maximum number of mints
    cap: 90
    offset:
        end: 100
    # mint start and end absolute block height (optional)
  # future runes protocol changes may be opt-in. this may be for a variety of
  # reasons, including that they make light client validation harder, or simply
  # because they are too degenerate.
  #
  # setting `turbo` to `true` opts in to these future protocol changes,
  # whatever they may be.
  turbo: false

# inscriptions to inscribe
inscriptions:
- file:


# Runes relies on storing token “metadata” (name, total supply, divisibility, mint terms, etc.) inside a Bitcoin transaction. This data is made “visible” to the protocol via an Ordinals inscription.
# In short, the inscription is your token’s “genesis record.”





